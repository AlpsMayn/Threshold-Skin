steam.styles
{
  include "resource/styles/legacycolors.styles"
  include "resource/styles/settings.styles"
  include "config.ini"
  colors
  {
	// cool we can define font-families here as well
    basefont="Segoe UI"
	semibold="Segoe UI Semibold"
	
	//Standard Element/Text colors ********
	//TODO: Some of these colors arent actually used, fix or remove
	
	Dark =  "14 14 14 255"
	Neutral = "31 31 31 255"
	Light = "43 43 43 255"
	
	DefaultBackground=Neutral
	
	DefaultText=white
	DefaultText.Hover="153 153 153 255"
	DefaultText.Disabled="102 102 102 255"
	DefaultText.Selected=DefaultText
	DefaultText.Back=Accent //For highlighted text
	DefaultCursor=white
		
	Label.Text=DefaultText
	SubLabel.Text="180 180 180 255" //Any label we want to have visual distinction, usually subheaders
	
	URL.Text=Accent
	URL.Hover.Text=DefaultText.Hover
		
	Page.Back=Neutral
	Page.Tab=Light
	Page.Tab.Active=Accent
	Page.Tab.Hover="78 78 78 255"
	Page.Tab.Active.Hover=Page.Tab.Active
	Page.Tab.Text=DefaultText
	Page.Tab.Active.Text=DefaultText
	
	List.Back=Dark
	List.Header=Light
	List.Header.Div=Neutral
	List.Page=Dark
	List.Page.Header=Light
	List.Page.Header.Div=Neutral
	List.Text=DefaultText
	List.Header.Text=DefaultText
	List.Header.Text.Hover=DefaultText.Hover
	List.Text.Disabled=DefaultText.Disabled
	
	Button.Back="51 51 51 255"
	Button.Page.Back="51 51 51 255"
	Button.Hover="74 74 74 255"
	Button.Page.Hover="74 74 74 255"
	Button.Active=Accent
	Button.Active.Hover=Accent2
	Button.Disabled=Button.Back
	Button.Text=DefaultText
	Button.Hover.Text=DefaultText
	Button.Active.Text=DefaultText
	Button.Disabled.Text="109 109 109 255"
	
	//Check.Outline="204 204 204 255"
	//Check.Hover.Outline=white
	//Check.Active=Accent
	Check.Text=DefaultText
	Check.Text.Hover=DefaultText.Hover
	Check.Disabled.Text=DefaultText.Disabled
	
	Radio.Outline="204 204 204 255"
	Radio.Hover.Outline=white
	Radio.Active=Accent
	Radio.Text=DefaultText
	Radio.Text.Hover=DefaultText.Hover
	Radio.Disabled.Text=DefaultText.Disabled
	
	ComboBox.Back="17 17 17 255"
	ComboBox.Outline="119 119 119 255"
	ComboBox.Hover=Light
	ComboBox.Active=ComboBox.Hover
	ComboBox.Disabled=Button.Back
	ComboBox.Text=DefaultText
	ComboBox.Disabled.Text="110 110 110 255"
	
	Scroll.Back="23 23 23 255"
	Scroll.Bar.Back="69 69 69 255"
	Scroll.Bar.Hover="116 116 116 255"
	Scroll.Bar.Active="162 162 162 255"
	Scroll.Button.Back=Scroll.Back
	Scroll.Button.Hover=Scroll.Bar.Hover
	Scroll.Button.Active=Scroll.Bar.Active
	
	Menu.Back=ComboBox.Hover
	Menu.Button.Hover="96 96 96 170"
	Menu.Button.Active=Accent2
	Menu.Hover="64 64 64 255"
	Menu.Active=Accent
	Menu.Outline="118 118 118 255"
	Menu.Div="128 128 128 255"
	Menu.Text=DefaultText
	Menu.Disabled.Text=DefaultText.Disabled
	
	Progress.Back=Button.Hover
	
	TextBox.Back=ComboBox.Back
	TextBox.Outline=ComboBox.Outline
	TextBox.Outline.Hover=white
	TextBox.Active=white
	TextBox.Outline.Active=Accent
	TextBox.Text=TextBox.Outline
	TextBox.Hover.Text=DefaultText
	TextBox.Active.Text=black
	TextBox.Disabled.Text=DefaultText.Disabled
	TextBox.Active.Cursor=black
	
	//Specific Element colors *********
	
	//These are all in accent specific ini now
	//TitleBar="8 8 8 255"
	//TitleBar.Focus="8 8 8 255" //For loss of focus
	//Notification.Back="31 31 31 255"
	
	TitleBar.Hover="70 70 70 100" //for buttons on titlebar
	TitleBar.CloseButton="232 17 35 255"
	Frame.Text="96 96 96 255"
	Frame.Focus.Text=DefaultText
	
	Root.Header = DefaultBackground
	Root.LeftCol = Light //Left Column
	Root.LeftCol.Header= DefaultBackground
	Root.LeftCol.Bottom = DefaultBackground
	Root.Back = Dark
	Root.RightCol = DefaultBackground //Right column (When needed)
	Root.Div = Menu.Div
	Root.BackTransparent="14 14 14 170" //For details header/grid chrome
	
	Root.LeftCol.Text=DefaultText
	Root.Label.Text=DefaultText
	Root.Label.Hover.Text="180 180 180 255"
	Root.SubLabel.Text="180 180 180 255"
	Root.LeftCol.Disabled=DefaultText.Disabled
	
	Search.Back=Scroll.Back
	Search.Text="130 130 130 255"
	Search.Hover.Text="180 180 180 255"
	Search.Active.Text=DefaultText
	
	Chat.Back = Root.Back
	Chat.Popup = DefaultBackground
	Chat.Div = Root.Header
	
	Uninstalled.Text=DefaultText.Disabled
	Uninstalled.Hover.Text="94 94 94 255"
	Installed.Text=DefaultText
	Installed.Hover.Text="200 200 200 255"
	Shortcut.Text=Installed.Text
	Shortcut.Hover.Text=DefaultText
	Mod.Text=Installed.Text
	Mod.Hover.Text=DefaultText
	Updating.Text=AccentText //active game text needs to be accent specific to prevent conflicts
	Updating.Hover.Text=AccentTextHover
	Decrypting.Text=AccentText
	Decrypting.Hover.Text=AccentTextHover
	Syncing.Text=AccentText
	Syncing.Hover.Text=AccentTextHover
	Running.Text=AccentText
	Running.Hover.Text=AccentTextHover
	
 }
  
 styles
 {
	downarrow
	{
		image="graphics/Threshold/icons/down"    
	}

	downarrow:hover
	{
		image="graphics/Threshold/icons/down"
	}

	uparrow
	{
		image="graphics/Threshold/icons/up"    
	}
	
	rightarrow
	{
		image="graphics/Threshold/icons/right" 
	}
	
	rightarrow:hover
	{
		image="graphics/Threshold/icons/right_hover"    
	}
		
	Button
	{     
		font-family=basefont
		font-size=12
		font-size=13 [$WINDOWS]
		font-weight=400
		textcolor=Button.Text
		bgcolor=none
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Button.Back )"
		}
	}
	 
    "Page Button"
    {     
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Button.Page.Back)"	
		}
    }
    
	Button:hover
    {   
  		textcolor=Button.Hover.Text
  		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Back )"
			1="fill( x0, y0, x0+2, y1, Button.Hover)"
			2="fill( x1-2, y0, x1, y1, Button.Hover)"
			3="fill( x0, y0, x1, y0+2, Button.Hover)"
			4="fill( x0, y1-2, x1, y1, Button.Hover)"			
		}
    }

    "Page Button:hover"
    {   
		textcolor=Button.Hover.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Page.Back )"
			1="fill( x0, y0, x0+2, y1, Button.Page.Hover)"
			2="fill( x1-2, y0, x1, y1, Button.Page.Hover)"
			3="fill( x0, y0, x1, y0+2, Button.Page.Hover)"
			4="fill( x0, y1-2, x1, y1, Button.Page.Hover)"
		}
    }
    
    Button:focus
    {
		textcolor=Button.Active.Text
		render_bg
	    {
			0="fill( x0, y0, x1, y1, Button.Active)"			    
	    }
    }
    
    "Page Button:focus"
    {
		textcolor=Button.Active.Text
		render_bg
		{     
			0="fill( x0, y0, x1, y1, Button.Active)"
		}
    }
    
    Button:active // this is the left-mouse-currently-pressed state
	{
		textcolor=Button.Active.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Active)"
		}
    }
    
    "Page Button:active"
    {
		textcolor=Button.Active.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Active)"
		}
    }
    
    Button:selected
    {
		textcolor=Button.Active.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Active)"
		}
    }

    "Page Button:selected"
    {
		textcolor=Button.Active.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Active)"
		}
    }
	
	Button:selected:hover
    {
		textcolor=Button.Active.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Active)"
			1="fill( x0, y0, x0+2, y1, Button.Active.Hover)"
			2="fill( x1-2, y0, x1, y1, Button.Active.Hover)"
			3="fill( x0, y0, x1, y0+2, Button.Active.Hover)"
			4="fill( x0, y1-2, x1, y1, Button.Active.Hover)"
		}
    }

    "Page Button:selected:hover"
    {
		textcolor=Button.Active.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Active)"
			1="fill( x0, y0, x0+2, y1, Button.Active.Hover)"
			2="fill( x1-2, y0, x1, y1, Button.Active.Hover)"
			3="fill( x0, y0, x1, y0+2, Button.Active.Hover)"
			4="fill( x0, y1-2, x1, y1, Button.Active.Hover)"
		}
    }
    
    Button:disabled
    {
		textcolor=Button.Disabled.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Disabled)"             
		}
    }   
    
    "Page Button:disabled"
    {     
		textcolor=Button.Disabled.Text
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Button.Disabled )"             
		}   
    }
       
    CFriendsListSectionAffordance //Group list header option dropdown button
    {     
		inset="0 0 0 0"
		font-size=12
		font-size=14 [$WINDOWS]
		font-weight=400
		textcolor=DefaultText
    }
    
    CFriendsListSectionHeader
    {
		bgcolor=none
		font-family=basefont
		font-size=12
		font-size=14 [$WINDOWS]
		font-weight=400
		textcolor=List.Header.Text
		inset="5 0 0 0"
		render_bg
		{
			0="fill( x0-2, y0, x1, y1, Root.Header )"
		}
    }
            
    CFriendPanel
    {
		inset="0 2 0 0"
		bgcolor=none
		font-family=basefont
		font-size=12
		font-size=14 [$WINDOWS]
		font-weight=400
		textcolor=DefaultText
    }

    CheckButton
    {
		font-family=basefont
		inset="0 0 0 0"
		font-size=12
		font-size=14 [$WINDOWS]
		font-weight=400
		textcolor=Check.Text
		image="graphics/Threshold/icons/check"
    }
  
    CheckButton:selected
    {
		image="graphics/Threshold/icons/check_sel" 		
    }

    CheckButton:focus
    {
		textcolor=Check.Text
		image="graphics/Threshold/icons/check" 
	
    }
	
	CheckButton:hover
    {
		textcolor=Check.Text.Hover
		image="graphics/Threshold/icons/check_hover" 

    }

    CheckButton:selected:focus
    {
		textcolor=Check.Text
		image="graphics/Threshold/icons/check_sel"
    }
	
	CheckButton:selected:hover
    {
		textcolor=Check.Text.Hover
		image="graphics/Threshold/icons/check_sel_hover"	
    }
    
    CheckButton:disabled
    {
		textcolor=Check.Disabled.Text
		image="graphics/Threshold/icons/check_dis"
    }
    
    CheckButton:selected:disabled
    {
		textcolor=Check.Disabled.Text
		image="graphics/Threshold/icons/check_sel_dis"
    }

	IndeterminateCheckButton
	{
		font-family=basefont
		font-size=12
		font-size=14 [$WINDOWS]
		font-weight=400
		textcolor=Check.Text
		bgcolor=none
		image="graphics/Threshold/icons/check_ind"
	}
	
	IndeterminateCheckButton:hover
	{
		textcolor=Check.Text.Hover
		image="graphics/Threshold/icons/check_ind_hover"
	}

    CheckButtonList
    {
        inset="1 1 1 1"
        textcolor=List.Text
        bgcolor=List.Back
        render	{}  
		render_bg {				
			// background gradient        
			0="fill( x0, y0, x1, y1, List.Back )"
		}
    } 
    
    CheckButtonList:scrollbar
    {
        inset="1 1 1 1"
    } 
    
    "Page CheckButtonList"
    {
        inset="1 1 1 1"
        textcolor=List.Text
        bgcolor=List.Page
        render	{      	}  
		render_bg
        {     
			// background fill
			0="fill( x0, y0, x1, y1, List.Page )"
      	}
    }
    
    "Page CheckButtonList:scrollbar"
    {
        inset="1 1 1 1"
   	}
    
    "CheckbuttonList Checkbutton"
    {
		textcolor=Check.Text
	}
	
	"CheckbuttonList Checkbutton:hover"
    {
		textcolor=Check.Text.Hover
	} 
    
    "CheckbuttonList Checkbutton:focus"
    {
		textcolor=Check.Text
	} 
	
	"CheckbuttonList Checkbutton:selected"
    {
		render_bg
		{
			
		}	
	} 
    
    ComboBox
    {
		inset="3 0 0 0"
		textcolor=ComboBox.Text
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, ComboBox.Back )"
			1="fill(x0, y0, x0+1, y1, ComboBox.Outline)" //left
			2="fill(x1-1, y0, x1, y1, ComboBox.Outline)" //right
			3="fill(x0, y0, x1, y0+1, ComboBox.Outline)" //top
			4="fill(x0, y1-1, x1, y1, ComboBox.Outline)" //bottom
		}
    }
    
    ComboBox:hover
    {
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, ComboBox.Hover )"
			1="fill(x0, y0, x0+1, y1, ComboBox.Outline)" //left
			2="fill(x1-1, y0, x1, y1, ComboBox.Outline)" //right
			3="fill(x0, y0, x1, y0+1, ComboBox.Outline)" //top
			4="fill(x0, y1-1, x1, y1, ComboBox.Outline)" //bottom
		}
    }
    
    ComboBox:focus:hover
    {
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, ComboBox.Hover )"
			1="fill(x0, y0, x0+1, y1, ComboBox.Outline)" //left
			2="fill(x1-1, y0, x1, y1, ComboBox.Outline)" //right
			3="fill(x0, y0, x1, y0+1, ComboBox.Outline)" //top
			4="fill(x0, y1-1, x1, y1, ComboBox.Outline)" //bottom
		}
    }
	
    
    "Page ComboBox"
    {
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, ComboBox.Back )"
			1="fill(x0, y0, x0+1, y1, ComboBox.Outline)" //left
			2="fill(x1-1, y0, x1, y1, ComboBox.Outline)" //right
			3="fill(x0, y0, x1, y0+1, ComboBox.Outline)" //top
			4="fill(x0, y1-1, x1, y1, ComboBox.Outline)" //bottom
		}
    }
    
    "Page ComboBox:focus"
    {
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, ComboBox.Back )"
			1="fill(x0, y0, x0+1, y1, ComboBox.Outline)" //left
			2="fill(x1-1, y0, x1, y1, ComboBox.Outline)" //right
			3="fill(x0, y0, x1, y0+1, ComboBox.Outline)" //top
			4="fill(x0, y1-1, x1, y1, ComboBox.Outline)" //bottom
		}
    }
    
    "Page ComboBox:hover"
    {
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, ComboBox.Hover )"
			1="fill(x0, y0, x0+1, y1, ComboBox.Outline)" //left
			2="fill(x1-1, y0, x1, y1, ComboBox.Outline)" //right
			3="fill(x0, y0, x1, y0+1, ComboBox.Outline)" //top
			4="fill(x0, y1-1, x1, y1, ComboBox.Outline)" //bottom
		}
    }
    
    "Page ComboBox:focus:hover"
    {
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, ComboBox.Hover )"
			1="fill(x0, y0, x0+1, y1, ComboBox.Outline)" //left
			2="fill(x1-1, y0, x1, y1, ComboBox.Outline)" //right
			3="fill(x0, y0, x1, y0+1, ComboBox.Outline)" //top
			4="fill(x0, y1-1, x1, y1, ComboBox.Outline)" //bottom
		}
    }
    
    
    ComboBoxButton
    {      
		bgcolor=none
		padding-left=2
		image="graphics/Threshold/icons/down"
		render_bg 
		{
		}
    }
    
    
    "Page ComboBoxButton"
    {
		image="graphics/Threshold/icons/down"
    }
    
    Divider
    {
		bgcolor="none"
		render
		{
			0="fill( x0, y1 - 1, x1, y1, Menu.Div )"     
		}
    }
    
    Frame
    {
		bgcolor="DefaultBackground"
		render{
			0="fill(x0, y0, x1, y0+1, Frame.Outline.Focus)"
			1="fill(x0, y0, x0+1, y1, Frame.Outline.Focus)"
			2="fill(x1-1, y0, x1, y1, Frame.Outline.Focus)"
			3="fill(x0, y1-1, x1, y1, Frame.Outline.Focus)"
		}
    } 
    
    Frame:FrameFocus
    {
		render{
			0="fill(x0, y0, x1, y0+1, Frame.Outline)"
			1="fill(x0, y0, x0+1, y1, Frame.Outline)"
			2="fill(x1-1, y0, x1, y1, Frame.Outline)"
			3="fill(x0, y1-1, x1, y1, Frame.Outline)"
		}
    } 
    
    FrameBRGripPanel
    {
		//image=graphics/resizer
    }
    
    FrameBRGripPanel:hover
    {
		//image=graphics/resizer_over
    }
    
    FrameMinimizeButton
	{
		render_bg {}
		inset="12 11 0 0"
		image="graphics/Threshold/window_controls/min"
	}
	
	FrameMinimizeButton:hover
	{  
		bgcolor="TitleBar.Hover"
	}
	
	FrameMinimizeButton:active
	{  
		bgcolor="TitleBar.Hover"
	}

	FrameMaximizeButton
	{
		render_bg {}
		inset="12 11 0 0"
		image="graphics/Threshold/window_controls/max"
	}
	
	FrameMaximizeButton:hover
	{
		bgcolor="TitleBar.Hover"
	}
	
	FrameMaximizeButton:active
	{
		bgcolor="TitleBar.Hover"
	}

	// these are for when the maximize button becomes the restore button
	FrameRestoreButton
	{
		render_bg {}
		inset="12 11 0 0"
		image="graphics/Threshold/window_controls/restore"
	}

	FrameRestoreButton:hover
	{
		bgcolor="TitleBar.Hover"
	}

	FrameRestoreButton:active
	{
		bgcolor="TitleBar.Hover"
	}

	FrameCloseButton
	{
		render_bg {}
		inset="12 11 0 0"
		image="graphics/Threshold/window_controls/close"
	}

	FrameCloseButton:hover
	{
		bgcolor="TitleBar.CloseButton"
	}

	FrameCloseButton:active
	{
		bgcolor="TitleBar.CloseButton"
	}

	FrameCloseButton:disabled
	{
		image="graphics/Threshold/window_controls/close" 
	}

    FrameTitle
    {
		font-family=basefont
		inset="5 1 0 0"
		padding-left="0"
		padding-right="64"
		font-size=12
		font-size=14 [$WINDOWS]
		font-weight=400
		textcolor=Frame.Text
		bgcolor="none"
		render_bg
		{
			0="fill( x0, y0, x1, y1, TitleBar.Focus)"
		}
    }

    
    FrameTitle:framefocus
    {
		textcolor=Frame.Focus.Text
		render_bg
		{
			0="fill( x0, y0, x1, y1, TitleBar)"
		}
    }
    
   
	"CFriendsDialog SectionedListPanelInterior"
	{
		bgcolor=none
		inset="-6 -1 -1 -1"
		font-family=basefont
		font-size=12
		font-size=14 [$WINDOWS]
		font-weight=400
		textcolor=List.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		shadowtextcolor=List.Text.Disabled	// the color of disabled line items		
		render{	}
		render_bg { 
		}
	}	

    GraphPanel //XXX:Pretty sure this isnt even used anymore
    {
		textcolor=Accent
		bgcolor=none
		inset="0 -3 0 0"
		render_bg { }
    }
    
    HTML
    {
		bgcolor="almostblack"
		//inset="2 2 2 2"
		render_bg 
		{
			0="fill( x0, y0, x1, y1, almostblack )" // bg
	    }
     
    }
    
    Label
	{
		textcolor=Label.Text
		selectedtextcolor=Label.Text
		bgcolor="none"
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
 	}
   
    ListPanel
    {
		bgcolor=none
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=List.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		shadowtextcolor=List.Text.Disabled	// the color of disabled line items
		padding-left=10
		inset="0 0 0 0"
		render{}       
		render_bg 
		{
			// background gradient        
			0="fill( x0, y0, x1, y1, List.Back)"
		}
	}
      
    "Page ListPanel"
	{
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=List.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		padding-left=10
		inset="0 0 0 0"
		bgcolor=none
		render_bg
		{     
			// background fill
			1="fill( x0, y1, x1, y1, List.Page )"
		}
	}
    
    "CGamesListPanel"
	{
		font-family=basefont
		bgcolor="none"
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=List.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		shadowtextcolor=List.Text.Disabled
		padding-left=10
		inset="0 0 0 0"
		render_bg {
			// background gradient        
			1="fill( x0, y0, x1, y1, Root.Back )"
        }
    }
  
    "GameItem_Uninstalled"
    {
		textcolor=Uninstalled.Text
		selectedtextcolor=Uninstalled.Hover.Text
    }
    "GameItem_Uninstalled:hover"
    {
		textcolor=Uninstalled.Hover.Text
		selectedtextcolor=Uninstalled.Hover.Text
	}
 
    "GameItem_Installed"
    {
		textcolor=Installed.Text
		selectedtextcolor=Installed.Text
    }
      
    "GameItem_Installed:hover"
    {
		textcolor=Installed.Hover.Text
		selectedtextcolor=Installed.Text
    }

    "GameItem_Running"
    {
      textcolor=Running.Text
      selectedtextcolor=Running.Hover.Text
    }
    
    "GameItem_Running:hover"
    {
      textcolor=Running.Hover.Text
      selectedtextcolor=Running.Hover.Text
    }
    
    "GameItem_Shortcut"
    {
		textcolor=Shortcut.Text
		selectedtextcolor=Shortcut.Hover.Text
    }
      
    "GameItem_Shortcut:hover"
    {
        textcolor=Shortcut.Hover.Text
        selectedtextcolor=Shortcut.Hover.Text
    }
    
    "GameItem_Mod"
    {
		textcolor=Mod.Text
		selectedtextcolor=Mod.Hover.Text
    }
      
    "GameItem_Mod:hover"
    {
        textcolor=Mod.Hover.Text
        selectedtextcolor=Mod.Hover.Text
    }

    "GameItem_Updating"
    {
    	textcolor=Updating.Text
    	selectedtextcolor=Updating.Hover.Text
    }
    
    "GameItem_Updating:hover"
    {
    	textcolor=Updating.Hover.Text
    	selectedtextcolor=Updating.Hover.Text
    }
    
    "GameItem_Updating:selected"
    {
    	textcolor=Updating.Hover.Text
    	selectedtextcolor=Updating.Hover.Text
    }
    
    "GameItem_Decrypting"
    {
    	textcolor=Decrypting.Text
    	selectedtextcolor=Decrypting.Hover.Text
    }
    
    "GameItem_Decrypting:hover"
    {
    	textcolor=Decrypting.Hover.Text
    	selectedtextcolor=Decrypting.Hover.Text
    }
    
    "GameItem_Decrypting:selected"
    {
    	textcolor=Decrypting.Hover.Text
    	selectedtextcolor=Decrypting.Hover.Text
    }
    
    "GameItem_Syncing"
    {
    	textcolor=Syncing.Text
    	selectedtextcolor=Syncing.Hover.Text
    }
    
    "GameItem_Syncing:hover"
    {
    	textcolor=Syncing.Hover.Text
    	selectedtextcolor=Syncing.Hover.Text
    }
    
    "GameItem_Syncing:selected"
    {
    	textcolor=Syncing.Hover.Text
    	selectedtextcolor=Syncing.Hover.Text
    }
    
    "GameColumn_BigText"
	{
		font-family=basefont
		font-size=15
		font-size=20 [$WINDOWS]
		font-weight=700
		textcolor=DefaultText
    }
    
    ListPanelCheckBox
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=Check.Text
		image="graphics/Threshold/icons/check_sm"
		inset="0 0 0 0"
    }   

    ListPanelCheckBox:selected
    {
		image="graphics/Threshold/icons/check_sm_sel"   
    }

	ListPanelCheckBox:focus
    {
		image="graphics/Threshold/icons/check_sm" 
    }

    ListPanelCheckBox:selected:focus
    {
		image="graphics/Threshold/icons/check_sm_sel"
    }
    
    ListPanelCheckBox:disabled
    {
		textcolor=Check.Disabled.Text
		image="graphics/Threshold/icons/check_dis"
    }
    
    ListPanelCheckBox:disabled:select
    {
		textcolor=Check.Disabled.Text
		image="graphics/Threshold/icons/check_sel_dis"
    }
    
    "ListPanelColumnheader ListPanelCheckBox"
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=Check.Text
		image="graphics/Threshold/icons/check_sm"
		inset="4 0 0 0"  
		}
     
	"ListPanelColumnHeader ListPanelCheckBox:selected"
    {
		image="graphics/Threshold/icons/check_sm_sel"  
    }
	
	"ListPanelColumnheader ListPanelCheckBox:focus"
    {
		image="graphics/Threshold/icons/check_sm"
	}

	"ListPanelColumnheader ListPanelCheckBox:selected:focus"
    {
		image="graphics/Threshold/icons/check_sm_sel"
    }
    
    ListPanelColumnheader
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=List.Header.Text
		bgcolor="none"
		inset="0 0 0 0"
		render_bg    
		{
			// fill
			0="fill (x0, y0, x1, y1, List.Header)" // bg
		}   
	}
    
    ListPanelColumnHeader:hover
    {
		textcolor=List.Header.Text.Hover
    }
	
	"Page ListPanelColumnHeader"
	{
		render_bg    
		{
			// fill
			0="fill (x0, y0, x1, y1, List.Page.Header)" // bg
		} 
	}
      
	"Csteamrootdialog ListPanelColumnheader"
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=List.Header.Text
		bgcolor="none"
		inset="0 0 0 0"
		
		render_bg    
		{
			// fill
			0="fill (x0, y0, x1, y1, Root.Header )" // bg fill
		}   
	}

   
    "Csteamrootdialog ListPanelColumnHeader:hover"
    {
		textcolor=List.Header.Text.Hover
    }
    
   	"Csteamrootdialog ListPanelSectionCollapser"
	{
		inset = "0 1 0 0"
		bgcolor=none
		render_bg
		{
			1="fill( x0 , y0, x1, y1, Root.Header )"
		}    
	}
	
	"CGamesPage_Mini ListPanelSectionCollapser"
	{
		inset = "5 1 0 0"
		bgcolor=none
		render_bg
		{
			1="fill( x0 , y0, x1, y1, Root.Header  )"
		}    
	}
    

 
	ListPanelColumnSelectButton // the games list column chooser  
	{
        inset="-3 3 0 0"
		bgcolor=none
        render
        {
			0="image( x0 + 5, y0 + 4, x1, y1, graphics/Threshold/icons/plus )"
        }   
        render_bg {
			1="fill( x0 , y0, x1, y1, List.Header)"
        }
	}
    
	ListPanelColumnSelectButton:hover
	{
        render
        {
			0="image( x0 + 5, y0 + 4, x1, y1, graphics/Threshold/icons/plus_hover )"
        }
	}
	ListPanelColumnSelectButton:selected
	{
        render
        {
			0="image( x0 + 5, y0 + 4, x1, y1, graphics/Threshold/icons/plus )"
        }
	}

	"CGamesListPanel ListPanelColumnSelectButton"   
	{
        inset="0 0 0 0"
        render
        {
			0="image( x0+2, y0+2, x1, y1, graphics/Threshold/icons/plus )"
        }   
        render_bg {
			1="fill( x0, y0, x1, y1, Root.Header )"
        }
	}
	"CGamesListPanel ListPanelColumnSelectButton:hover"   
	{
        render
        {
			0="image( x0+2, y0+2, x1, y1, graphics/Threshold/icons/plus_hover )"
        }   
	}
	"CGamesListPanel ListPanelColumnSelectButton:selected"   
	{
        render
        {
			0="image( x0+2, y0+2, x1, y1, graphics/Threshold/icons/plus )"
        }  
	}
   
    ListPanelDragger
	{
		bgcolor="none"
		render 
		{
			//fill makes dragger visible
			0="fill( x0, y0, x0 + 1, y1 - 1, List.Header.Div )"
		}
    }
	
	"Page ListPanelDragger"
	{
		bgcolor="none"
		render 
		{
			//fill makes dragger visible
			0="fill( x0, y0, x0 + 1, y1 - 1, List.Page.Header.Div )"
		}
    }
    
    ListPanelInterior
    {     
		inset="0 0 0 0"
		padding-left=5
		font-size=13
		font-size=20 [$WINDOWS]
		textcolor=List.Text
		bgcolor="none" 
		render
		{				

		}
		render_bg 
		{				

		}
    } 
    
    ListPanelInterior:scrollbar
    {     

    } 

	"CSteamRootDialog ListPanel"
	{
		
	}
    
     "Csteamrootdialog ListPanelInterior"
    {     
		render_bg 
		{
			0="fill(x0, y0, x1, y1, Root.Back)"
		}
	}
	
	"Csteamrootdialog ListPanelInterior:scrollbar"
    {     
		render
		{
		}
	}
	
	"Page ListPanelInterior"
	{
		render_bg 
		{				
			// background gradient        
			0="fill( x0, y0, x1, y1, List.Page )"
		}
	}
	
	"Page ListPanelInterior:scrollbar"
	{

	}
      
    ListPanelSectionHeader
    {     
		inset="5 0 0 0"
		textcolor=List.Header.Text
		minimum-height=25
		font-size=15
		font-size=20 [$WINDOWS]
		render_bg
		{
			0="fill( x0, y0, x1, y1, List.Header)"
		}    
    } 
	
	"Csteamrootdialog ListPanelSectionHeader"
    {     
		render_bg
		{
			0="fill( x0, y0, x1, y1, Root.Header)"
		}    
    }
    
	"ListPanel RichText"
	{
		textcolor=TextBox.Text
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		bgcolor=none
		render_bg {} 
	}

	"ListPanel RichText url" 
	{
		font-size=13
		font-size=15 [$WINDOWS]
		textcolor=TextBox.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-style=underline
	}

    "ListPanel RichTextInterior"
    {
		render_bg {} 
		bgcolor=none
    }
    
    ListPanelSectionCollapser
    {
		bgcolor=none
		render_bg {}
		image="graphics/Threshold/icons/right" 
		inset="0 0 0 0"
    }
    
    ListPanelSectionCollapser:hover
    {
		image="graphics/Threshold/icons/right_hover" 
    }
    
    ListPanelSectionCollapser:selected
    {
		image="graphics/Threshold/icons/down" 
    }
    
    ListPanelSectionCollapser:selected:hover
    {
		image="graphics/Threshold/icons/down_hover" 
    }
    
	MainNav
    {
		textcolor=DefaultText
		selectedtextcolor=DefaultText
		bgcolor="none"
		font-family=basefont
		font-size=16
		font-size=24 [$WINDOWS]
		font-weight=700
		//font-style="uppercase"
    }

	Menu
    {
		bgcolor=none
		padding-right=4
		inset="2 2 2 2"
      
		render_bg
		{
			0="fill( x0, y0, x1, y1, Menu.Back )"
			1="fill(x0, y0, x0+1, y1, Menu.Outline)" //left
			2="fill(x1-1, y0, x1, y1, Menu.Outline)" //right
			3="fill(x0, y0, x1, y0+1, Menu.Outline)" //top
			4="fill(x0, y1-1, x1, y1, Menu.Outline)" //bottom
		}
      
		render {}
    }
      
    MenuBar
    {
		bgcolor=none
    }
    
    "Page MenuBar"
    {
		bgcolor=none
    }
    
	"MenuBar MenuButton" 
	{
		textcolor="none"
		inset="0 0 0 0"
		render{
			0="image(x0+17,y0+10,x1,y1,graphics/Threshold/menu)"
		}
	}
	
	"MenuBar MenuButton:hover" 
	{
		textcolor="none"
		//bgcolor=Menu.Hover
		render_bg {
			0="fill(x0,y0,x1,y1,TitleBar.Hover)" //Most Menubars are in the titlebar, so style as such
		}
	}
	
 	"MenuBar MenuButton:frameFocus" 
	{
		textcolor="none"
	}
	
	"MenuBar MenuButton:frameFocus:hover" 
	{
		textcolor="none"
		//bgcolor=Menu.Hover
		render_bg {
			0="fill(x0,y0,x1,y1,TitleBar.Hover)"
		}
	}
	
	"MenuBar MenuButton:frameFocus:selected" 
	{
		textcolor="none"
		//bgcolor=Menu.Hover
		render_bg {
			0="fill(x0,y0,x1,y1,TitleBar.Accent)"
		}

	}
	
	MenuButton //XXX: where is this used?
    {
		font-family=basefont
		font-size=26 //SIGH...
		font-weight=400
		textcolor=DefaultText
		bgcolor="none"
		render_bg {}
    }  
   
	MenuButton:hover
    {
		//textcolor="white"
    }
    
	MenuButton:selected
    {
		//textcolor="white"
    }
        
	MenuItem
    {
		font-family=basefont
		textcolor=Menu.Text
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		inset="0 0 0 0"
		padding-right=6
		bgcolor=none
		render_bg {}
    }
   
	MenuItem:selected
    {
		bgcolor=Menu.Hover
    }
	
	MenuItem:hover
    {
		bgcolor=Menu.Hover
    }
    
    MenuItem:disabled
    {
		textcolor=Menu.Disabled.Text
    }
    
    MenuItem:disabled:hover
    {
		textcolor=Menu.Disabled.Text
		bgcolor=Menu.Hover
    }
   
    MenuSeparator
    {
		inset="-4 0 0 0"	
		textcolor="none"
		bgcolor=none
		render_bg{
			0="fill(x0+15,y1-1,x1-20,y1,Menu.Div)"
		}
    }

    Notification
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		bgcolor=Notification.Back
		render_bg
		{
		}
		render {}
    }

    
    Page
    {
		bgcolor="none"
		render_bg
		{
			// background gradient
			0="fill( x0, y0, x1, y1, Page.Back )"
		}
    }

    "CSteamRootDialog Page"
    {
		bgcolor="none"
		render_bg {}
    }
    
    "Page RadioButtonList"
    {
		bgcolor="List.Page"
    }
      
	PageTab
    {
		textcolor=Page.Tab.Text
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		inset="0 0 0 0"
		render_bg
		{
			//Background
			0="fill( x0, y0, x1, y1, Page.Tab )"
		}
    }

    
    PageTab:selected
    {
		textcolor=Page.Tab.Active.Text
		render_bg
		{
			// background gradient
			0="fill( x0, y0, x1, y1, Page.Tab.Active )"
		}
    }

    
 	PageTab:hover
    {
		textcolor=Page.Tab.Text
		render_bg
		{
			// background gradient
			0="fill( x0, y0 , x1, y1, Page.Tab.Hover )"
		}
    }
  
    PageTab:selected:hover
    {
		textcolor=Page.Tab.Active.Text
		render_bg
		{
			// background gradient
			0="fill( x0, y0, x1, y1, Page.Tab.Active.Hover )"
		}
    }

	"PageDragFrame PageTab"
	{
		font-size=13
		font-size=15 [$WINDOWS]
		font-style=""
	}

	TabCloseButton
    {
		render_bg {}
		image="graphics/Threshold/icons/tiny_x"
    }

	TabCloseButton:hover
    {
		image="graphics/Threshold/icons/tiny_x_hover"
    }
    
    Panel
	{ 
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=DefaultText
		bgcolor="none"
	}
    
	ProgressBox //Legend has fortold that this is the loading frame
	{
	
	}
	
	"ProgressBox ProgressBar"
	{
		textcolor=none
		bgcolor=none
	}
	
    ProgressBar
    {
		textcolor="Accent"
		bgcolor="Progress.Back"
		render
		{
			// lines around
			//1="fill( x0 + 1, y0 + 1, x1 - 1, y0 + 2, ButtonBorder )"  // top
			//2="fill( x0 + 1, y1 - 2, x1 - 1, y1 - 1, ButtonBorder )"  // bottom
			//3="fill( x0 + 1, y0 + 1, x0 + 2, y1 - 1, ButtonBorder )"  // left
			//4="fill( x1 - 2, y0 + 1, x1 - 1, y1 - 1, ButtonBorder )"  // right
		}   
	}
    
	"Page ProgressBar"
    {
		textcolor="Accent"
		bgcolor="Progress.Back"
		render
		{
			// lines around
			//1="fill( x0 + 1, y0 + 1, x1 - 1, y0 + 2, ButtonBorder )"  // top
			//2="fill( x0 + 1, y1 - 2, x1 - 1, y1 - 1, ButtonBorder )"  // bottom
			//3="fill( x0 + 1, y0 + 1, x0 + 2, y1 - 1, ButtonBorder )"  // left
			//4="fill( x1 - 2, y0 + 1, x1 - 1, y1 - 1, ButtonBorder )"  // right  
		}   
    }
	
    PropertyPage
    {
		bgcolor="none"
    }
    
    "CFriendsDialog PropertySheet"
    {
		bgcolor="none"
    }
    
    RadioButton
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=Radio.Text
		render_bg {}
		image="graphics/Threshold/icons/rad"
		bgcolor=none
    } 
	
	RadioButton:hover
    {
		textcolor=Radio.Text.Hover
		image="graphics/Threshold/icons/rad_hover"
    }     
  
    RadioButton:selected
    {
		image="graphics/Threshold/icons/rad_sel"  
    }
	
	RadioButton:selected:hover //Since selected radio buttons cant be toggled, only change the text color
    {
		textcolor=Radio.Text.Hover
		image="graphics/Threshold/icons/rad_sel"  
    }
    
    RadioButton:focus
    {
		textcolor=Radio.Text
		image="graphics/Threshold/icons/rad"
    }
	
	RadioButton:focus:hover
    {
		textcolor=Radio.Text.Hover
		image="graphics/Threshold/icons/rad_hover"
    }

    RadioButton:selected:focus
    {
		textcolor=Radio.Text  
		image="graphics/Threshold/icons/rad_sel"
    }
	
	RadioButton:selected:focus:hover
    {
		textcolor=Radio.Text.Hover  
		image="graphics/Threshold/icons/rad_sel"
    }
    
    RadioButtonList
    {
		bgcolor="none"
		inset="-2 0 0 0"
		render_bg
		{
			0="fill( x0, y0, x1, y1, List.Back  )"
		}     
    }
        
    RichText
    {
		textcolor=TextBox.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back	
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		inset="0 0 0 0"
		render_bg
		{
			0="fill( x0, y0, x1, y1, TextBox.Back )"
        
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline )"  // right
		}     
    }
         
    RichTextInterior 
	{
		bgcolor=none
    }
    
	// style of links in a rich text control
	
	"RichText url"
	{
		font-size=13
		font-size=15 [$WINDOWS]
		textcolor=URL.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-style=underline
	}
	
	"RichText url:hover"
	{
		textcolor=URL.Hover.Text
	}
	
	"CFriendPanel RichText URL" 
	{
		textcolor=TextBox.Text
		font-style=underline
		font-size=13
		font-size=15 [$WINDOWS]
	}
	
	// style of bold text in a rich text control
	"RichText bold"
	{
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=1000
	}
	
	"RichText emphasis"
	{
		font-size=13
		font-size=15 [$WINDOWS]
		font-style=italic
	}

	ScrollBar
	{
		inset="0 0 0 0"
	}
    
    ScrollBarButton.up
    {
		bgcolor=none
		inset="-1 2 0 0"
		image="graphics/Threshold/scroll/up"
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Back )"
		}
		
    }
    
    ScrollBarButton.up:hover
    {
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Hover )"
		}
    }
    
    ScrollBarButton.up:active
    {
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Active )"
		}
    }

    ScrollBarButton.up:disabled
    {
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, buttonfaceDisabled )"
		}
    }
	
    ScrollBarButton.down
	{
		bgcolor=none
		inset="-2 0 0 0"
		image="graphics/Threshold/scroll/down"
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Back )"
		}
    }
    
    ScrollBarButton.down:hover
	{
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Hover )"
		}
    }
    
    ScrollBarButton.down:active
	{
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Active )"
		}
    }
    
    
    ScrollBarButton.down:disabled
	{
		image="graphics/Threshold/scroll/down" //TODO
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Back )"
		}
    }
    
    ScrollBarButton.left
    {
		bgcolor=none
		inset="1 3 0 0"
		image="graphics/Threshold/scroll/left"
		render_bg 
		{
			// center fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Back )"
		}
    }
    
    ScrollBarButton.left:hover
    {
		render_bg 
		{
			// center fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Hover )"
	    }
    }
        
    ScrollBarButton.right
    {
		bgcolor=none
		image="graphics/Threshold/scroll/right"
		inset="0 2 0 0"
		render_bg 
		{
			// center fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Back )"
	    }
    }
        
    ScrollBarButton.right:hover
    {
		render_bg 
		{
			// center fill
			0="fill( x0, y0, x1, y1, Scroll.Button.Hover )"
		}
    }
    
    ScrollBarHandle  //vertical scrollbar thumb
    {
		bgcolor=none
		render_bg 
		{
			// center fill
			0="fill( x0, y0, x1, y1, Scroll.Bar.Back )"
		}
    }
       
    "ScrollBarHandle:hover"
    {
		render_bg 
		{
			// center fill
			0="fill( x0, y0, x1, y1, Scroll.Bar.Hover )"
		}
    }
    
    "ScrollBarHandle:active"
    {
		render_bg 
		{
			// center fill
			0="fill( x0, y0, x1, y1, Scroll.Bar.Active )"
		}
    }
    

 
    "SliderHoriz"  //horizontal scrollbar thumb
    {
		render 
		{
			// center fill
			1="fill( x0, y0, x1, y1, Scroll.Bar.Back )"		
		}
    }
    
    "SliderHoriz:hover"
    {
		render 
      	{
			// center fill
			0="fill( x0, y0, x1, y1, Scroll.Bar.Hover )"	
		}
    }
    
    "SliderHoriz:active"
    {
      	render {
			// center fill
        	0="fill( x0, y0, x1, y1, Scroll.Bar.Active )"	
		}
    }
    
    ScrollBarSlider // gutter
    {
		bgcolor=Scroll.Back
		render{ }
		render_bg
		{
		}
    }
    
    ScrollBarSliderHoriz // gutter
    {
		bgcolor=Scroll.Back
		render{ }
		render_bg { }
    }
    
   
    "GamesPage_Details ListPanel ScrollBarSlider" // gutter in games list detail view 
    {
		bgcolor=Scroll.Back
    }
    
    ScrollBarSlider:disabled 
    {
		bgcolor="none"
		render_bg {}
    }
    
    "ScrollBar SliderHoriz" // gutter
    {
		bgcolor="none"
    }

	"HTML ScrollBar"
	{
		bgcolor="none"
		render_bg { 
			0="fill(x0,y0,x1, y1, Scroll.Back)"
		}
	}
	"HTML ScrollBar.Horizontal"
	{
		bgcolor="none"
		render_bg { 
			0="fill(x0,y0,x1,y1, Scroll.Back)"
		}
	}
	
	"HTML ScrollBarSlider.Horizontal" 
	{
		bgcolor=none
		render_bg {
			//background fill
			0="fill( x0, y0, x1, y1, Scroll.Back)"
		}

	}

	"HTML SliderHoriz"
	{
		bgcolor=none
		render_bg
		{
		}
	}
 
    SectionedListPanel
    {
		bgcolor=none
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=List.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		bgcolor="none"
		inset="1 -1 1 1"  
		render
		{				

		}
		render_bg 
		{
			// background fill
	   		1="fill( x0, y0, x1, y1, List.Back )"   		
		}    
    }  
    
    "CFriendsDialog SectionedListPanel"
    {
		bgcolor=DefaultBackground
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=List.Text
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		render { }
		render_bg 
		{
			// background fill
	   		//0="gradient( x0, y0, x1, y0 + 140, dialogbg, almostblack )"
	   		//1="fill( x0, y0, x1, y1, Root.Back )"   		
		}    
    }
    
    SectionedlistpanelCollapser
    {
		render_bg 
		{
			1="fill( x0, y0, x1, y1, List.Header )" 
		}
		bgcolor=none
		image="graphics/Threshold/icons/right"
		inset="6 0 0 0"
    } 
	
	"CFriendsDialog SectionedlistpanelCollapser"
    {
		render_bg 
		{
			1="fill( x0, y0, x1, y1, Root.Header )" 
		}
		bgcolor=none
		image="graphics/Threshold/icons/right"
		inset="6 0 0 0"
    } 
    
    SectionedListPanelCollapser:hover
    {
		image="graphics/Threshold/icons/right_hover"
    }
	
	"CFriendsDialog SectionedListPanelCollapser:hover"
    {
		image="graphics/Threshold/icons/right_hover"
    }
    
    SectionedListPanelCollapser:selected
    {
		image="graphics/Threshold/icons/down"
    }
	
	"CFriendsDialog SectionedlistpanelCollapser:selected"
    {
		image="graphics/Threshold/icons/down"
    } 
    
    SectionedListPanelCollapser:selected:hover
    {
		image="graphics/Threshold/icons/down_hover"
    }
	
	"CFriendsDialog SectionedListPanelCollapser:selected:hover"
    {
		image="graphics/Threshold/icons/down_hover"
    }
  
    Slider //XXX: ??? I guess these are in settings?
    {
		font-family=basefont
		font-size=10
		font-weight=400
		textcolor=SubLabel.Text
		//font-style=uppercase
    }
      
    Slider:focus
    {
		textcolor=Label.Text 
    }
    
    StatusLabel
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=Label.Text
		font-style=normal   
    }
    
    StatusLabelDim
    {
		font-family=basefont
		font-size=11
		font-size=13 [$WINDOWS]
		font-weight=400
		textcolor=SubLabel.Text
		font-style=normal   
    }

    TextEntry
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		textcolor=TextBox.Text
		font-weight=400
		bgcolor="none"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		shadowtextcolor=DefaultCursor  // this is the cursor color

		inset-left=4
		inset-top=0
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Back)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline )"  // right
		}     
    }
    
	"Page TextEntry"
    {
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Back)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline )"  // right
		}      
    }
	
	TextEntry:hover
	{
		textcolor=TextBox.Hover.Text
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Back)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline.Hover )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline.Hover )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline.Hover )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline.Hover )"  // right
		}
	}
	
	"Page TextEntry:hover"
	{
		textcolor=TextBox.Hover.Text
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Back)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline.Hover )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline.Hover )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline.Hover )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline.Hover )"  // right
		}
	}
    
    TextEntry:focus //Active
    {     
		textcolor=TextBox.Active.Text
		shadowtextcolor=TextBox.Active.Cursor
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Active)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline.Active )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline.Active )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline.Active )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline.Active )"  // right
		}     
    }
       
    "Page TextEntry:focus"
    {     
		textcolor=TextBox.Active.Text
		shadowtextcolor=TextBox.Active.Cursor
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Active)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline.Active )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline.Active )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline.Active )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline.Active )"  // right
		}      
    }
    
    
    TextEntry:disabled
    {     
		textcolor=TextBox.Disabled.Text
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Back)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline )"  // right
		}     
    }
    
	// The 'empty' style is used for 'hint text' in text entry fields.
	// If the text box does not have focus and does not have content, a
	// hint text property will be shown with this style. This is comment
	// to pre-fill to box with something like 'Search' that goes away when active
	TextEntry:empty
	{
		font-style=italic
		textcolor=TextBox.Disabled.Text
	}
	
    TextEntryLarge //Used for password on login screen
    {
		font-family=basefont
		font-size=15
		font-size=20 [$WINDOWS]
		textcolor=TextBox.Text
		font-weight=400
		bgcolor="none"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		shadowtextcolor=DefaultCursor  // this is the cursor color

		inset-left=4
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Back)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline )"  // right
		}   
    }

    TextEntryLarge:hover
    {     
		textcolor=TextBox.Hover.Text
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Back)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline.Hover )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline.Hover )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline.Hover )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline.Hover )"  // right
		} 
    }
	
	TextEntryLarge:focus
    {     
		textcolor=TextBox.Active.Text
		shadowtextcolor=TextBox.Active.Cursor
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Active)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline.Active )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline.Active )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline.Active )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline.Active )"  // right
		}  
    }
    
    TextEntryLarge:disabled
    {     
		textcolor=TextBox.Disabled.Text
		render_bg
		{
			0="fill(x0, y0, x1, y1, TextBox.Back)"
			// lines around
			1="fill( x0, y0, x1, y0 + 1, TextBox.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, TextBox.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, TextBox.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, TextBox.Outline )"  // right
		}  
    }
    
    TextEntryURL
	{
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		textcolor=URL.Text
		font-weight=400
		bgcolor="none"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		shadowtextcolor=DefaultCursor	// this is the cursor color
		inset-left=0
		inset-top=-1
		render { }			
	}

	TextEntryURL:Hover
	{
		textcolor=URL.Hover.Text
		render
		{
			// lines around
			1="fill( x0 + 1, y0 + 1, x1 - 1, y0 + 2, ButtonFaceDisabled )"  // top
			2="fill( x0 + 1, y1 - 2, x1 - 1, y1 - 1, ButtonFaceDisabled )"  // bottom
			3="fill( x0 + 1, y0 + 1, x0 + 2, y1 - 1, ButtonFaceDisabled )"  // left
			4="fill( x1 - 2, y0 + 1, x1 - 1, y1 - 1, ButtonFaceDisabled )"  // right
		}			
	}
	
	ToggleButton
    {
		inset="1 0 0 0"
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=Button.Text
		bgcolor=none
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Button.Back )"
		}
    }
  
    ToggleButton:focus
    {     

    }
    
    ToggleButton:hover
    {
		textcolor=Button.Hover.Text
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Back )"
			1="fill( x0, y0, x0+2, y1, Button.Hover)"
			2="fill( x1-2, y0, x1, y1, Button.Hover)"
			3="fill( x0, y0, x1, y0+2, Button.Hover)"
			4="fill( x0, y1-2, x1, y1, Button.Hover)"
		}
    }
    
    ToggleButton:selected
    {
		textcolor=Button.Active.Text
		render_bg
		{
        	// background fill
			0="fill( x0, y0, x1, y1, Button.Active)"
		}
    }
  
    
    "Page ToggleButton"
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=Button.Text
		bgcolor=none
		render_bg
		{
			// background fill
			0="fill( x0, y0, x1, y1, Button.Page.Back)"
		}
    }
    
    "Page ToggleButton:hover"
    {
		textcolor=Button.Hover.Text
		render_bg
		{
			0="fill( x0, y0, x1, y1, Button.Page.Back )"
			1="fill( x0, y0, x0+2, y1, Button.Page.Hover)"
			2="fill( x1-2, y0, x1, y1, Button.Page.Hover)"
			3="fill( x0, y0, x1, y0+2, Button.Page.Hover)"
			4="fill( x0, y1-2, x1, y1, Button.Page.Hover)"
		}
    }
  
    "Page ToggleButton:focus"
    {
    }
   
    "Page ToggleButton:selected"
    {
		textcolor=Button.Hover.Text
		render_bg
		{
			0="fill( x0, y0, x1, y1, Button.Active)"
		}
    }
    
    // the background and frame of a tooltip
    TooltipWindow
    {
        bgcolor="Menu.Back"
		render_bg{
			1="fill( x0, y0, x1, y0 + 1, Menu.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, Menu.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, Menu.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, Menu.Outline )"  // right
		}
    }

	// body text inside a tooltip
    "TooltipWindow Label"
    {
		padding-left=4
        textcolor=Label.Text
    }
    
    // headline text inside a tooltip
   	tooltip_headline
   	{
   		textcolor=Accent
   		padding-left=4
   		font-weight=1000	
   	}
   	
    TreeNode
    {
		bgcolor=none
		render_bg {}
    }
    
    TreeNodeImage
    {
		bgcolor=none
    }
    
    TreeViewSubPanel
    {
		bgcolor=none
    }
  
    TreeNodeText
    {
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		textcolor=DefaultText
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		bgcolor=none
		render {}
		render_bg {}
    }
  
    TreeView //File list
    {
		render_bg
		{
		}
    }
    
    URLLabel
    {
		textcolor=URL.Text
		bgcolor="none"
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		font-style=underline
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
    }
    
   	URLLabel:Hover
	{
		textcolor=URL.Hover.Text
	}
		
	URLLabelSimple
    {
		textcolor=URL.Text
		bgcolor="none"
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		font-style=regular
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
    }
    
	URLLabelSimple:Hover
    {
		font-style=underline
		textcolor=URL.Hover.Text
    }  
    
	URLLabelSimple2
    {
		textcolor=URL.Text
		bgcolor="none"
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		font-style=regular
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
    }
    
	URLLabelSimple2:Hover
    {
		textcolor=URL.Hover.Text
    }  

    
    // Steam-specific styles
    CConsoleHistory
    {
		font-family="Lucida Console"
		font-size=9
		font-family="Menlo" [$OSX]
		font-size=14 [$OSX]
		textcolor=DefaultText
		selectedtextcolor=DefaultText
      
		render
		{				

		}
		render_bg 
		{				
			// background gradient        
			1="fill( x0, y0, x1, y1, Root.Back )"
		}
    }
    
    GameColumnHeaderFavorites
    {
		image="steam/cached/fav_remove"
    }
    
    CGamesListFavoritesToggle
    {
		image="graphics/Threshold/icons/fav_addTo"
    }
    
    CGamesListFavoritesToggle:hover
    {
		image="graphics/Threshold/icons/fav_addTo_ovr"
    }
    
    CGamesListFavoritesToggle:selected
    {
		image="graphics/Threshold/icons/fav_remove"
    }

    CGamesListFavoritesToggle:selected:hover
    {
		image="graphics/Threshold/icons/fav_remove_ovr"
    }

    WrapPanel //XXX: ?? I think this is used for screenshot library but HMM
    {
		inset="0 0 0 0"
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=DefaultText
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		bgcolor=none
		inset="1 -1 1 1"
		render_bg {
			// fill with white so we can tell where this shows up
			2="fill( x0, y0, x1, y1, white)"
        }  
    }
	
    FullscreenButton
    {
		bgcolor=none
		inset="12 0 0 0"
		render_bg={}
		image="graphics/Threshold/window_controls/fullscreen"
    }
    

    FullscreenButton:hover
    {
		bgcolor="TitleBar.Hover"
    }
	
    FullscreenButton:active
    {
		bgcolor="TitleBar.Hover"
    }
	
    FullscreenButton:disabled
    {
		bgcolor=none
		inset="0 0 0 0"
		render_bg={}
		image=none
    }
    
    VRButton
    {
		inset="2 0 0 0"
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/vr"
    }  

    VRButton:hover
    {
		bgcolor=Menu.Hover
    }
	
    VRButton:active
    {
		bgcolor=Menu.Hover
    }
	
    VRButton:disabled
    {
		bgcolor=none
		render_bg={}
		image="none"
    }
    
    VRButtonExit
    {
		inset="2 0 0 0"
		bgcolor=none
		textcolor=none
		render_bg={}
		image="graphics/Threshold/vr"
    }  

    VRButtonExit:hover
    {
		bgcolor=Menu.Hover
    }
	
    VRButtonExit:active
    {
		bgcolor=Menu.Hover
    }
	
    VRButtonExit:disabled
    {
		bgcolor=none
    }
	
	BackButton
    {
		bgcolor=none
		inset="0 0 0 0"
		render_bg={}
		image="graphics/Threshold/back"
    }
	
    BackButton:hover
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/back"
    }
	
    BackButton:active
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/back"
    }
	
    BackButton:disabled
    {
		bgcolor=none
		image="graphics/Threshold/back_dis"
		render_bg{}
    }
    
    ForwardButton
    {
		bgcolor=none
		inset="0 0 0 0"
		render_bg={}
		image="graphics/Threshold/forward"
    }
    
    ForwardButton:hover
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/forward"
    }
	
    ForwardButton:active
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/forward"
    }
	
    ForwardButton:disabled
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/forward_dis"
    }
    
    HomeButton
    {
		bgcolor=none
		inset="5 0 0 0"
		render_bg={}
		image="graphics/Threshold/home"
    }
    
    HomeButton:hover
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/home"
		render_bg={
			0="fill(x0,y0,x1,y1,Menu.Button.Hover)"
		}
    }
	
    HomeButton:active
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/home"
		render_bg={
			0="fill(x0,y0,x1,y1,Accent)"
		}
    }
	
    HomeButton:disabled
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/home"
    }
	
    ReloadButton
    {
		bgcolor=none
		inset="5 0 0 0"
		render_bg={}
		image="graphics/Threshold/reload"
    }
    
    ReloadButton:hover
    {
		bgcolor=none
		image="graphics/Threshold/reload"
		render_bg={
			0="fill(x0,y0,x1,y1,Menu.Button.Hover)"
		}
    }

    ReloadButton:active
    {
		bgcolor=none
		image="graphics/Threshold/reload"
		render_bg={
			0="fill(x0,y0,x1,y1,Accent)"
		}
    }

    ReloadButton:disabled
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/reload"
    }
    
    StopButton
    {
		bgcolor=none
		inset="5 0 0 0"
		render_bg={}
		image="graphics/Threshold/stop"
    }
    
    StopButton:hover
    {
		bgcolor=none
		image="graphics/Threshold/stop"
		render_bg={
			0="fill(x0,y0,x1,y1,Menu.Button.Hover)"
		}
    }

    StopButton:active
    {
		bgcolor=none
		image="graphics/Threshold/stop"
		render_bg={
			0="fill(x0,y0,x1,y1,Accent)"
		}
    }

    StopButton:disabled
    {
		bgcolor=none
		render_bg={}
		image="graphics/Threshold/stop"
    }
	
	"html-findbar"
 	{
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		textcolor=DefaultText
		font-weight=400
		bgcolor="DefaultBackground"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		shadowtextcolor=DefaultCursor	// this is the cursor color
		inset-left=0
		inset-top=0
		
		render
		{
			// lines around
		    1="fill( x0, y0, x1, y0 + 1, Menu.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, Menu.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, Menu.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, Menu.Outline )"  // right
		}     	
	}
		
 	"html-imebar" 
 	{
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		textcolor=DefaultText
		font-weight=400
		bgcolor="DefaultBackground"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		shadowtextcolor=DefaultCursor	// this is the cursor color
		inset-left=0
		inset-top=0
		
		render
		{
		    // lines around
		    1="fill( x0, y0, x1, y0 + 1, Menu.Outline )"  // top
			2="fill( x0, y1 - 1, x1, y1, Menu.Outline )"  // bottom
			3="fill( x0, y0, x0 + 1, y1, Menu.Outline )"  // left
			4="fill( x1 - 1, y0, x1, y1, Menu.Outline )"  // right
		}     	
	}
      
	gamedetails-headerlabel
	{
		font-size=15
		font-size=20 [$WINDOWS]
		font-style="normal"
		font-family=basefont
		font-weight=700
		textcolor=DefaultText
		//font-style="uppercase;"
	}

	gamedetails-headerlabel-red
	{
		font-size=15
		font-size=20 [$WINDOWS]
		font-style="normal"
		font-family=basefont
		font-weight=700
		textcolor="Accent"
		//font-style="uppercase;"
	}
 	
	gamedetails-headerlabel-green
	{
		font-size=15
		font-size=20 [$WINDOWS]
		font-style="normal"
		textcolor="Accent"
		font-family=basefont
		font-weight=700
		//font-style="uppercase;"
	}

	gamedetails-headerlabel-blue
	{
		font-size=15
		font-size=20 [$WINDOWS]
		font-style="normal"
		textcolor="Accent"
		font-family=basefont
		font-weight=700
		//font-style="uppercase;"
	}
	
	// styles for text used in RichText controls in various places
	
	console_text_error
	{
		textcolor="Accent"
		font-size=14
		font-family="Menlo" [$OSX]
      	font-size=16 [$OSX]
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
	}
	
	console_text
	{
 		font-family="Lucida Console"
		font-size=9
		font-family="Menlo" [$OSX]
      	font-size=14 [$OSX]
	    textcolor=DefaultText
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
	}
	
	friends_chat_text //TODO: Chat text colors
	{
		textcolor="DefaultText"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-size=13
		font-size=15 [$WINDOWS]
	}
	
	friends_chat_text_self
	{
		textcolor="ChatOwnTextColor"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-size=13
		font-size=15 [$WINDOWS]
	}

	friends_chat_history
	{
		textcolor="ChatDialog.HistoryColor"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-size=13
		font-size=15 [$WINDOWS]
	}
	
	friends_chat_event
	{
		textcolor="DefaultText"
		font-size=13
		font-size=15 [$WINDOWS]
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
	}

	friends_chat_bright_event
	{
		textcolor="DefaultText"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=1000
	}

	friends_chat_url
	{
		textcolor=URL.Text
		font-style=underline
		font-size=13
		font-size=15 [$WINDOWS]
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
	}
	
	friends_chat_url:hover
	{
		textcolor=URL.Hover.Text
	}
	
	friends_chat_name_ingame
	{
		textcolor="Friends.InGameColor"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-size=13
		font-size=15 [$WINDOWS]
	}

	friends_chat_name_golden
	{
		textcolor="Friends.GoldenColor"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-size=13
		font-size=15 [$WINDOWS]
	}

	
	friends_chat_self
	{
		textcolor="Friends.OnlineColor"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-size=13
		font-size=15 [$WINDOWS]
	}
	
	friends_chat_name
	{
		textcolor="Friends.OnlineColor"
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		font-size=13
		font-size=15 [$WINDOWS]
	}
	
	friends_chat_accountid
	{
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
		textcolor="DefaultText"
		font-size=13
		font-size=15 [$WINDOWS]
	}
	
	friends_chat_securitylink
	{
		textcolor="DefaultText"
		bgcolor="none"
		font-family=basefont
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		font-style=underline
		selectedtextcolor=DefaultText.Selected
		selectedbgcolor=DefaultText.Back
	}
	
	friends_chat_securitylink:Hover
	{
		textcolor="DefaultText.Hover"
	}
	
	CChatRoomDlg //TODO: Here lies (some) chat window things. May god have mercy on your soul
	{			
		bgcolor="none"

		render
		{
		}
		render_bg
		{	
			0="fill(x0,y0,x1,y1,DefaultBackground)"
		}

	}
		
	ChatListPanel
	{	
		render {}

		render_bg
		{
			0="fill( x0, y0, x1, y1, Chat.Back)"
		}
	}
		
	Chat_MenuButton_withChrome
	{
		font-family=basefont
		//font-style="uppercase"
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=400
		textcolor=DefaultText
		bgcolor="none"
		minimum-width=120
		render_bg 
		{     
			// background fill
			0="fill( x0, y0, x1, y1, Button.Back )"             
		}
	}
	
	Chat_MenuButton_withChrome:disabled
	{
		textcolor=DefaultText.Disabled
		render_bg
		{     
			// background fill
			0="fill( x0, y0, x1, y1, none )"   
		}
    }    
    
   	// used in friends tooltip and friends list for overriding regular styles with custom colors
   	friends_offline
   	{
   		textcolor="Friends.OfflineColor"
   	}
   	
    friends_offline:hover
   	{
   		textcolor="Friends.OfflineHoverColor"
   	}
   	
   	friends_online
   	{
   		textcolor="Friends.OnlineColor"
   	}
   	
   	friends_online:hover
   	{
   		textcolor="Friends.OnlineHoverColor"
   	}
   	
   	friends_ingame
   	{
   		textcolor="Friends.InGameColor"
   	}
   	   	
   	friends_ingame:hover
   	{
   		textcolor="Friends.InGameHoverColor"
   	}

   	friends_golden
   	{
   		textcolor="Friends.GoldenColor"
   	}
   	   	
   	friends_golden:hover
   	{
   		textcolor="Friends.GoldenHoverColor"
   	}
   	
   	friends_ignored
   	{
   		textcolor="Friends.IgnoredColor"
   	}

   	
   	TabPageCloseButton
   	{
   		padding-right=16
   	}

	SuperNavMenu
	{
		padding-left=8
		padding-right=8

		render {}

		render_bg
		{
			// top area and graphic
			0="fill( x0, y0, x1, y1, Menu.Back )"
			1="fill(x0, y0, x0+1, y1, Menu.Outline)" //left
			2="fill(x1-1, y0, x1, y1, Menu.Outline)" //right
			3="fill(x0, y0, x1, y0+1, Menu.Outline)" //top
			4="fill(x0, y1-1, x1, y1, Menu.Outline)" //bottom
		}
	}

	SuperNavMenuItem
	{
		font-size=13
		font-size=15 [$WINDOWS]
		font-weight=regular
		textcolor=Menu.Text
		bgcolor=none
	}

	SuperNavMenuItem:selected
	{
		textcolor=Menu.Text
		render_bg
		{
			// top area and graphic
			0="fill( x0+1, y0+1, x1-1, y1-1, Menu.Hover )"
		}
	}

	SuperNavMenuItem:hover
	{
		textcolor=Menu.Text
		render_bg
		{
			// top area and graphic
			0="fill( x0+1, y0+1, x1-1, y1-1, Menu.Hover )"
		}
	}

	"SuperNavMenuDivider" //Pretty sure this uses MenuDivider anyway, why bother having two
	{
		textcolor="none"
		render {
			//1="fill( x0+6, y0+1, x1-6, y0+2, Menu.Div )"
		}
	}
	
	"NotifyRemoteClientTitle" //XXX:??
	{
		textcolor="DefaultText"
	}
	
	"NotifyRemoteClientInfo"
	{
		textcolor="176 172 165 255"
	}
	
	//Special window styling for older frames
	CGamePropertiesDialog
	{
		render_bg {
			0="fill(x0, y0, x1, y0+56, Page.Tab)"
		}
	}
	
	CServerBrowserDialog
	{
		render_bg {
			0="fill(x0, y0, x1, y0+56, Page.Tab)"
		}
	}
	
	CInternetGames
	{
		render_bg {
			0="fill(x0, y0, x1, y1 - 32, Page.Tab)"
		}
	}
	
	COverlaySettingsDialog
	{
		render_bg {
			0="fill(x0, y0, x1, y0+60, Page.Tab)"
		}
	}
	
  }
}
